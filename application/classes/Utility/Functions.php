<?php

class Utility_Functions
{

    public static function _toJson($data)
    {
        return html_entity_decode(preg_replace('/\\\\u([0-9a-f]{4})/i', '&#x\1;', Zend_Json::encode($data)), ENT_NOQUOTES, 'UTF-8');
    }
    
    // get an array and transform it
    public static function argsToArray(array $args, $delimiter = ":")
    {
        $params = array();
        foreach ($args as $key => $value) {
            $tmp = explode($delimiter, $value);
            $params[$tmp[0]] = htmlentities($tmp[1]);
        }
        return $params;
    }

    public static function cleanArgsValue(array $args, $delimiter = "-")
    {
        foreach ($args as $key => $value) {
            $tmp = explode($delimiter, $value);
            $args[$key] = htmlentities(trim($tmp[0]));
        }
        return $args;
    }

    public static function parDelimiter()
    {
        $delimiter = ";";
        return $delimiter;
    }

    /**
     * Returns array of parameters in case of form submit
     */
    public static function getPostedArgs()
    {
        $params_arr = array();
        array_push($params_arr, "moduleId:" . $_POST['treeNodeId']);
        array_push($params_arr, "itemFound:" . $_POST['row_id']);
        
        return $params_arr;
    }

    /**
     * marilda: Returns copy of array
     * 
     * @param array $array            
     *
     */
    public static function arrayCopy(array $array)
    {
        $result = array();
        foreach ($array as $key => $val) {
            if (is_array($val)) {
                $result[$key] = $this->arrayCopy($val);
            } elseif (is_object($val)) {
                $result[$key] = clone $val;
            } else {
                $result[$key] = $val;
            }
        }
        return $result;
    }

    public static function getSelectedPerson()
    {
        return $_SESSION['person']['selected'];
    }

    /**
     * Returns array of parameters in case of form submit
     * 
     */
    public static function postArgsToArrayNew($module_id, $sel_row = "", $keys_str = "", $values_str = "")
    {
        $keys = explode(",", (string) $keys_str);
        $values = explode(",", (string) $values_str);
        
        $params_arr = array();
        $params_arr["0"] = "moduleId:" . $module_id;
        $params_arr["1"] = "itemFound:" . $sel_row;
        $j = 2;
        for ($i = 0; $i < count($values); $i ++) {
            $key = $keys[$i];
            $val = $values[$i];
            if ($val != "")
                $params_arr[$j] = $key . ":" . $val;
            $j ++;
        }
        return $params_arr;
    }

    /**
     * marilda: Delete all files with a given extension in a directory after certain time
     * Used to delete all temporary files generated by reports
     * 
     * @param
     *            $exportType
     * @param $xslFile name
     *            of xls file defining the view of the report
     */
    public static function delExpiredFiles()
    {
        // Define the folder to clean
        // (keep trailing slashes)
        $tmpFolder = 'tmp/';
        
        // Filetypes to check (you can also use *.*)
        $fileTypes = array();
        $fileTypes["0"] = '*.pdf';
        $fileTypes["1"] = '*.tmp';
        
        // Here you can define after how many
        // minutes the files should get deleted
        $expire_time = 0.5;
        // iterate through file types to be deleted
        foreach ($fileTypes as $fileType) :
            // Find all files of the given file type
            foreach (glob($tmpFolder . $fileType) as $Filename) {
                
                // Read file creation time
                // $FileCreationTime = filectime($Filename);
                
                // Calculate file age in seconds
                // $FileAge = time() - $FileCreationTime;
                
                // Is the file older than the given time span?
                // if ($FileAge > ($expire_time * 60)){
                
                // Now do something with the olders files...
                
                // print "The file $Filename is older than $expire_time minutes\n";
                
                // For example deleting files:
                unlink($Filename);
                // }
            }
        endforeach
        ;
    }

    public function getImages($dir)
    {
        $imagetypes = array(
            "jpg",
            "jpeg",
            "png",
            "gif"
        );
        
        // array to hold return value
        $retval = array();
        
        // add trailing slash if missing
        if (substr($dir, - 1) != "/")
            $dir .= "/";
            
            // full server path to directory
        $fulldir = "{$_SERVER['DOCUMENT_ROOT']}/$dir";
        $d = @dir($fulldir) or die("getImages: Failed opening directory $dir for reading");
        while (false !== ($entry = $d->read())) {
            // skip hidden files
            if ($entry[0] == ".")
                continue;
                
                // check for image files
            $ext = pathinfo("$fulldir$entry", PATHINFO_EXTENSION);
            if (in_array($ext, $imagetypes)) {
                $retval[] = array(
                    'file' => "$entry",
                    'size' => getimagesize("$fulldir$entry")
                );
            }
        }
        $d->close();
        
        return $retval;
    }
    
    public static function generateRewriteTitle($title){
        $rewrite_title = strtolower(str_replace(array('ë', 'Ë', 'ç', 'Ç', ' ', '\'', '/',  ':', ';', '"', ')', '(', ',', '?', '!', '”', '“', '’', '‘', "%", '#', '@', '&'), 
                                                array('e', 'e', 'c', 'c', '-', '',   '',   '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  '',  ''), 
                                                $title));
        
        return $rewrite_title;
    }
}

?>